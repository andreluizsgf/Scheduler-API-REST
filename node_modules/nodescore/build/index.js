'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lib = require('./lib');

var _promise = require('promise');

var _promise2 = _interopRequireDefault(_promise);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _watchjs = require('watchjs');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/** Class representing wrapper object. */
exports.default = module.exports = function () {
    /**
     * creates a NodeScore wrapper object
     *
     * @param {string} key - the API Key from http://football-api.com/
     */
    function NodeScore(key) {
        _classCallCheck(this, NodeScore);

        this.url = 'http://api.football-api.com/2.0/';
        this.auth = '?Authorization=' + key;
        this.cacheManager = {
            init: [false, false],
            competitions: {},
            standings: {},
            teams: {},
            players: {},
            matches: {}
        };
    }

    _createClass(NodeScore, [{
        key: 'competition',


        /**
         * returns one competition in promise form
         *
         * @param {number} id - the id of the competition
         * @return {Promise<Competition, Error>} returns a
         * Promise containing  a Competition object.
         */
        value: function competition(id) {
            var _this = this;

            var self = this;
            return new _promise2.default(function (resolve, reject) {
                id = typeof id !== 'undefined' && id !== null ? id : '';
                var url = _this.url + 'competitions/' + id + _this.auth;
                _this.getData('competitions', id, url, 24 * 3600 * 1000).then(function (competition) {
                    return resolve((0, _lib.createObject)(_lib.Competition, self, competition));
                }).catch(function (err) {
                    return reject(err);
                });
            });
        }

        /**
         * returns multiple competitions in promise form
         *
         * @return {Promise<Competition[], Error>} returns a
         * Promise containing an array of Competition objects.
         */

    }, {
        key: 'competitions',
        value: function competitions() {
            var _this2 = this;

            var self = this;
            return new _promise2.default(function (resolve, reject) {
                var url = _this2.url + 'competitions/' + _this2.auth;
                _this2.getData('competitions', 'all', url, 24 * 3600 * 1000).then(function (competition) {
                    return resolve((0, _lib.createObject)(_lib.Competition, self, competition));
                }).catch(function (err) {
                    return reject(err);
                });
            });
        }

        /**
         * returns one or multiple standings in promise form
         *
         * @param {number} compId - the id of the competition
         * @return {Promise<Standing[], Error>} returns a
         * Promise containing either a Standing object or an array of Standing
         * objects.
         */

    }, {
        key: 'standings',
        value: function standings(compId) {
            var _this3 = this;

            var self = this;
            return new _promise2.default(function (resolve, reject) {
                var url = _this3.url + 'standings/' + compId + _this3.auth;
                _this3.getData('standings', compId, url, 2 * 3600 * 1000).then(function (standing) {
                    return resolve((0, _lib.createObject)(_lib.Standing, self, standing));
                }).catch(function (err) {
                    return reject(err);
                });
            });
        }

        /**
         * returns one team in promise form
         *
         * @param {number} id - the id of the team
         * @return {Promise<Team, Error>} returns a
         * Promise containing  a Competition object.
         */

    }, {
        key: 'team',
        value: function team(id) {
            var _this4 = this;

            var self = this;
            return new _promise2.default(function (resolve, reject) {
                id = typeof id !== 'undefined' && id !== null ? id : '';
                var url = _this4.url + 'team/' + id + _this4.auth;
                _this4.getData('teams', id, url, 2 * 3600 * 1000).then(function (team) {
                    return resolve((0, _lib.createObject)(_lib.Team, self, team));
                }).catch(function (err) {
                    return reject(err);
                });
            });
        }

        /**
         * returns one player in promise form
         *
         * @param {number} id - the id of the player
         * @return {Promise<Player, Error>} returns a
         * Promise containing  a Player object.
         */

    }, {
        key: 'player',
        value: function player(id) {
            var _this5 = this;

            var self = this;
            return new _promise2.default(function (resolve, reject) {
                id = typeof id !== 'undefined' && id !== null ? id : '';
                var url = _this5.url + 'player/' + id + _this5.auth;
                _this5.getData('players', id, url, 2 * 3600 * 1000).then(function (player) {
                    return resolve((0, _lib.createObject)(_lib.Player, self, player));
                }).catch(function (err) {
                    return reject(err);
                });
            });
        }

        /**
         * returns live matches in promise form
         *
         * @return {Promise<Match[], Error>} returns a
         * Promise containing  a Player object.
         */

    }, {
        key: 'matches',
        value: function matches() {
            var _this6 = this;

            var self = this;
            var fromDate = new Date();
            var toDate = new Date();
            fromDate.setDate(fromDate.getDate() - 2);
            toDate.setDate(toDate.getDate() + 7);

            var fromDateString = (0, _lib.createStringFromDate)(fromDate);
            var toDateString = (0, _lib.createStringFromDate)(toDate);

            return new _promise2.default(function (resolve, reject) {
                var url = _this6.url + 'matches' + _this6.auth + ('&from_date=' + fromDateString) + ('&to_date=' + toDateString);
                _this6.getData('matches', 'all', url, 8000).then(function (matches) {
                    return resolve((0, _lib.createObject)(_lib.Match, self, matches));
                }).catch(function (err) {
                    return reject(err);
                });
            });
        }

        /**
         *
         * @param {*} type
         * @param {*} id
         * @param {*} url
         * @param {*} time
         *
         * @return {*}
         */

    }, {
        key: 'getData',
        value: function getData(type, id, url, time) {
            var _this7 = this;

            return new _promise2.default(function (resolve, reject) {
                _this7.checkCache(function () {
                    var cache = _this7.cacheManager[type];
                    var reqData = void 0;
                    if (cache[id] == undefined || cache[id].expiration <= new Date().getTime()) {
                        cache[id] = {
                            request: true,
                            expiration: new Date().getTime() + time
                        };
                        (0, _lib.getJSON)(url).then(function (data) {
                            resolve(data);
                            reqData = data;
                            return _fsExtra2.default.ensureDir('./.cache/' + type);
                        }).then(function () {
                            _fsExtra2.default.writeJSON('./.cache/' + type + '/' + id + '.json', reqData, { spaces: 4 });
                            cache[id].request = false;
                            _fsExtra2.default.writeJSON('./.cache/manager.json', _this7.cacheManager, { spaces: 4 });
                        }).catch(function (err) {
                            cache[id].request = false;
                            _fsExtra2.default.writeJSON('./.cache/manager.json', _this7.cacheManager, { spaces: 4 });
                            reject(err);
                        });
                    } else if (cache[id].request) {
                        (0, _watchjs.watch)(cache[id], 'request', function () {
                            if (!cache[id].request) {
                                (0, _watchjs.unwatch)(cache[id], 'request');
                                _fsExtra2.default.readJSON('./.cache/' + type + '/' + id + '.json').then(function (data) {
                                    return resolve(data);
                                }).catch(function (err) {
                                    return reject(err);
                                });
                            }
                        });
                    } else {
                        _fsExtra2.default.readJSON('./.cache/' + type + '/' + id + '.json').then(function (data) {
                            return resolve(data);
                        }).catch(function (err) {
                            return reject(err);
                        });
                    }
                });
            });
        }

        /**
         *
         * @param {*} callback
         */

    }, {
        key: 'checkCache',
        value: function checkCache(callback) {
            var _this8 = this;

            if (!this.cacheManager.init[0]) {
                if (!this.cacheManager.init[1]) {
                    this.cacheManager.init[1] = true;
                    _fsExtra2.default.readJSON('./.cache/manager.json').then(function (data) {
                        _this8.cacheManager.init[0] = true;
                        _this8.cacheManager.init[1] = false;
                        _this8.cacheManager = data;
                        callback();
                    }).catch(function () {
                        _this8.cacheManager.init[0] = true;
                        _this8.cacheManager.init[1] = false;
                        callback();
                    });
                } else {}
            } else {
                callback();
            }
        }
    }]);

    return NodeScore;
}();
//# sourceMappingURL=index.js.map