'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _util = require('./util');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/** */
var Match = function () {
    /**
     *
     * @param {*} wrapper
     * @param {*} match
     */
    function Match(wrapper, match) {
        _classCallCheck(this, Match);

        var m = match;

        this.wrapper = wrapper;
        this.id = parseInt(m.id);
        this.compId = parseInt(m.comp_id);
        this.date = (0, _util.createDateObject)(m.formatted_date);
        this.season = m.season;
        this.week = parseInt(m.week);
        this.venue = m.venue;
        this.venueId = parseInt(m.venue_id);
        this.venueCity = m.venue_city;
        this.status = m.status;
        this.timer = m.timer;
        this.time = m.time;
        this.htScore = m.ht_score;
        this.ftScore = m.ft_score;
        this.etScore = m.et_score;
        this.local = {
            id: parseInt(m.localteam_id),
            name: m.localteam_name,
            score: parseInt(m.localteam_score),
            penalty: m.penalty_local
        };
        this.visitor = {
            id: parseInt(m.visitorteam_id),
            name: m.visitorteam_name,
            score: parseInt(m.visitorteam_score),
            penalty: m.penalty_visitor
        };
        var events = [];
        m.events.forEach(function (event) {
            events.push(new Event(wrapper, event));
        });
        this.events = events;
    }

    /** @return {*} */


    _createClass(Match, [{
        key: 'toJSON',
        value: function toJSON() {
            var copy = Object.assign({}, this);
            delete copy.wrapper;

            return copy;
        }
    }]);

    return Match;
}();

/**  */


exports.default = Match;

var Event = function () {
    /**
     * 
     * @param {*} wrapper 
     * @param {*} event 
     */
    function Event(wrapper, event) {
        _classCallCheck(this, Event);

        var e = event;

        this.wrapper = wrapper;
        this.id = parseInt(e.id);
        this.type = e.type;
        this.time = {
            minute: parseInt(e.minute),
            extra: parseInt(e.extra_min)
        };
        this.team = e.team;
        this.playerId = parseInt(e.player_id);
        this.playerName = e.player;
        this.assistId = parseInt(e.assist_id);
        this.assistName = e.assist;
        this.result = e.result;
    }

    /** @return {*} */


    _createClass(Event, [{
        key: 'toJSON',
        value: function toJSON() {
            var copy = Object.assign({}, this);
            delete copy.wrapper;

            return copy;
        }
    }]);

    return Event;
}();
//# sourceMappingURL=match.js.map