'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _competition = require('./competition');

var _competition2 = _interopRequireDefault(_competition);

var _team = require('./team');

var _team2 = _interopRequireDefault(_team);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/** Class representing team's standing. */
var Standing = function () {
    /**
    *
    * @param {NodeScore} wrapper - the API wrapper object
    * @param {Object} standing - standing from the JSON
    */
    function Standing(wrapper, standing) {
        _classCallCheck(this, Standing);

        var s = standing;
        this.wrapper = wrapper;
        this.compId = parseInt(s.comp_id);
        this.season = s.season;
        this.round = s.round;
        this.stageId = parseInt(s.stage_id);
        this.compGroup = s.comp_group;
        this.country = s.country;
        this.teamId = parseInt(s.team_id);
        this.teamName = s.team_name;
        this.status = s.status;
        this.recentForm = s.recent_form;
        this.position = parseInt(s.position);
        this.points = parseInt(s.points);
        this.description = s.description;
        this.home = new Home(s);
        this.away = new Away(s);
    }

    /**
     * returns the competition of this standing in promise form
     *
     * @return {Promise<Competition, Error>} returns a
     * Promise containing a Competition object.
     */


    _createClass(Standing, [{
        key: 'competition',
        value: function competition() {
            return this.wrapper.competition(this.compId);
        }

        /**
         * returns the team of this standing in promise form
         *
         * @return {Promise<Team, Error>} returns a
         * Promise containing a Team object.
         */

    }, {
        key: 'team',
        value: function team() {
            return this.wrapper.team(this.teamId);
        }

        /**
         * returns total wins
         * @return {number} total wins
         */

    }, {
        key: 'wins',
        value: function wins() {
            return parseInt(this.home.wins + this.away.wins);
        }
    }, {
        key: 'draws',


        /**
         * returns total draws
         * @return {number} total draws
         */
        value: function draws() {
            return parseInt(this.home.draws + this.away.draws);
        }
    }, {
        key: 'losses',


        /**
         * returns total losses
         * @return {number} total losses
         */
        value: function losses() {
            return parseInt(this.home.losses + this.away.losses);
        }
    }, {
        key: 'gamesPlayed',


        /**
         * returns total games played
         * @return {number} total games played
         */
        value: function gamesPlayed() {
            return parseInt(this.home.gamesPlayed + this.away.gamesPlayed);
        }
    }, {
        key: 'goalsScored',


        /**
         * returns total goals scored
         * @return {number} total goals scored
         */
        value: function goalsScored() {
            return parseInt(this.home.goalsScored + this.away.goalsScored);
        }
    }, {
        key: 'goalsAccepted',


        /**
         * returns total goals accepted
         * @return {number} total goals accepted
         */
        value: function goalsAccepted() {
            return parseInt(this.home.goalsAccepted + this.away.goalsAccepted);
        }
    }, {
        key: 'goalDifference',


        /**
         * returns goal difference
         * @return {number} goal difference
         */
        value: function goalDifference() {
            return parseInt(this.goalsScored() - this.goalsAccepted());
        }
    }, {
        key: 'toJSON',


        /** @return {*} */
        value: function toJSON() {
            var copy = Object.assign({}, this);
            delete copy.wrapper;

            return copy;
        }
    }]);

    return Standing;
}();

exports.default = Standing;
;

/** Class representing team's standing statistics on the home side. */

var Home =
/**
 * creates a **Home** object to be used as an inner class
 * for the **Standing** class.
 *
 * @param {*} standing - standing from the JSON
 */
function Home(standing) {
    _classCallCheck(this, Home);

    var s = standing;
    this.wins = parseInt(s.home_w);
    this.draws = parseInt(s.home_d);
    this.losses = parseInt(s.home_l);
    this.gamesPlayed = parseInt(s.home_gp);
    this.goalsScored = parseInt(s.home_gs);
    this.goalsAccepted = parseInt(s.home_ga);
};

/** Class representing team's standing statistics on the away side. */


var Away =
/**
 * creates an **Away** object to be used as an inner class
 * for the **Standing** class.
 *
 * @param {*} standing - standing from the JSON
 */
function Away(standing) {
    _classCallCheck(this, Away);

    var s = standing;
    this.wins = parseInt(s.away_w);
    this.draws = parseInt(s.away_d);
    this.losses = parseInt(s.away_l);
    this.gamesPlayed = parseInt(s.away_gp);
    this.goalsScored = parseInt(s.away_gs);
    this.goalsAccepted = parseInt(s.away_ga);
};
//# sourceMappingURL=standing.js.map