'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _util = require('./util');

var _player = require('./player');

var _player2 = _interopRequireDefault(_player);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/** Class representing a team. */
var Team = function () {
    /**
     * creates a **Team** object
     *
     * @param {NodeScore} wrapper - the API wrapper object
     * @param {Object} team - team from the JSON
     */
    function Team(wrapper, team) {
        _classCallCheck(this, Team);

        var t = team;

        this.wrapper = wrapper;
        this.id = parseInt(t.team_id);
        this.isNational = t.is_national == 'True';
        this.founded = parseInt(t.founded);
        var leagues = [];
        t.leagues.split(',').forEach(function (league) {
            return leagues.push(parseInt(league));
        });

        /** @type {number[]} */
        this.leagues = leagues;

        /**
         * @typedef {Object} venue
         * @property {number} id - id of the venue
         * @property {string} name - name of the venue
         * @property {string} city - city of the venue
         * @property {string} address - address of the venue
         * @property {string} surface - surface of the venue
         * @property {number} capacity - capacity of the venue
        */
        var venue = {
            id: parseInt(t.venue_id),
            name: t.venue_name,
            city: t.venue_city,
            address: t.venue_address,
            surface: t.venue_surface,
            capacity: parseInt(t.venue_capacity)
        };
        this.venue = venue;

        /**
         * @typedef {Object} coach
         * @property {number} id - id of the coach
         * @property {string} name - name of the coach
         */
        var coach = {
            id: parseInt(t.coach_id),
            name: t.coach_name
        };
        this.coach = coach;
        this.squad = new Squad(wrapper, team);
        this.transfers = createTransfers(wrapper, team);
        this.statistics = new Statistics(t.statistics[0]);
    }

    /** @return {*} */


    _createClass(Team, [{
        key: 'toJSON',
        value: function toJSON() {
            var copy = Object.assign({}, this);
            delete copy.wrapper;

            return copy;
        }
    }]);

    return Team;
}();

/** Class representing a squad member. */


exports.default = Team;

var Member = function () {
    /**
     * creates a **Member** object to be used as an inner class
     * for the **Team** class.
     *
     * @param {NodeScore} wrapper - the API wrapper object
     * @param {Object} player - player from the JSON
     */
    function Member(wrapper, player) {
        _classCallCheck(this, Member);

        var p = player;

        this.wrapper = wrapper;
        this.id = parseInt(p.id);
        this.age = parseInt(p.age);
        this.name = p.name;
        this.number = parseInt(p.number);
        this.position = p.position;
        this.injured = p.injured == 'True';
        this.minutes = parseInt(p.minutes);
        this.appearences = parseInt(p.appearences);
        this.lineups = parseInt(p.lineups);
        this.goals = parseInt(p.goals);
        this.assists = parseInt(p.assists);
        this.cards = {
            yellow: parseInt(p.yellowcards),
            red: parseInt(p.redcards)
        };
        this.substitute = {
            in: parseInt(p.substitute_in),
            out: parseInt(p.substitute_out),
            onBench: parseInt(p.substitutes_on_bench)
        };
        /** @type {Sidelined[]} */
        this.sidelined = [];
    }

    /**
     * returns one player in promise form
     *
     * @return {Promise<Competition, Error>} returns a
     * Promise containing a **Player** object.
     */


    _createClass(Member, [{
        key: 'player',
        value: function player() {
            return this.wrapper.player(this.id);
        }

        /** @return {*} */

    }, {
        key: 'toJSON',
        value: function toJSON() {
            var copy = Object.assign({}, this);
            delete copy.wrapper;

            return copy;
        }
    }]);

    return Member;
}();

/** Class representing a sidelined squad member. */


var Sidelined =
/**
 * creates a **Sidelined** object to be used as an inner class
 * for the **Member** class.
 *
 * @param {NodeScore} wrapper - the API wrapper object
 * @param {Object} sidelined - sidelined from the JSON
 */
function Sidelined(wrapper, sidelined) {
    _classCallCheck(this, Sidelined);

    var s = sidelined;

    this.description = s.description;
    this.startDate = (0, _util.createDateObject)(s.startdate);
    this.endDate = s.enddate == '' ? null : (0, _util.createDateObject)(s.enddate);
};

/** Class representing a squad. */


var Squad = function () {
    /**
     * creates a **Squad** object to be used as an inner class
     * for the **Team** class.
     *
     * @param {NodeScore} wrapper - the API wrapper object
     * @param {Object} team - team from the JSON
     */
    function Squad(wrapper, team) {
        _classCallCheck(this, Squad);

        this.members = createMembers(wrapper, team);
    }

    /** @return {*} */


    _createClass(Squad, [{
        key: 'toJSON',
        value: function toJSON() {
            var copy = Object.assign({}, this);
            delete copy.wrapper;

            return copy;
        }
    }]);

    return Squad;
}();

/** Class representing a transfer. */


var Transfer = function () {
    /**
     * creates a **Transfer** object to be used as an inner class
     * for the **Team** class.
     *
     * @param {NodeScore} wrapper - the API wrapper object
     * @param {Object} player - player from the JSON
     */
    function Transfer(wrapper, player) {
        _classCallCheck(this, Transfer);

        var id = player.id,
            name = player.name,
            date = player.date;


        this.wrapper = wrapper;
        this.id = parseInt(id);
        this.name = name;
        this.date = (0, _util.createDateObject)(date);
    }

    /**
     * returns one player in promise form
     *
     * @return {Promise<Player, Error>} returns a
     * Promise containing a **Player** object.
     */


    _createClass(Transfer, [{
        key: 'player',
        value: function player() {
            return this.wrapper.player(this.id);
        }

        /** @return {*} */

    }, {
        key: 'toJSON',
        value: function toJSON() {
            var copy = Object.assign({}, this);
            delete copy.wrapper;

            return copy;
        }
    }]);

    return Transfer;
}();

/** Class representing a transfer in. */


var TransferIn = function (_Transfer) {
    _inherits(TransferIn, _Transfer);

    /**
     * creates a **TransferIn** object to be used as an inner class
     * for the **Team** class.
     *
     * @param {NodeScore} wrapper - the API wrapper object
     * @param {Object} player - player from the JSON
     */
    function TransferIn(wrapper, player) {
        _classCallCheck(this, TransferIn);

        var team_id = player.team_id,
            from_team = player.from_team;

        var _this = _possibleConstructorReturn(this, (TransferIn.__proto__ || Object.getPrototypeOf(TransferIn)).call(this, wrapper, player));

        _this.from = {
            teamId: parseInt(team_id),
            teamName: from_team
        };
        return _this;
    }

    return TransferIn;
}(Transfer);

/** Class representing a transfer in. */


var TransferOut = function (_Transfer2) {
    _inherits(TransferOut, _Transfer2);

    /**
     * creates a **TransferOut** object to be used as an inner class
     * for the **Team** class.
     *
     * @param {NodeScore} wrapper - the API wrapper object
     * @param {Object} player - player from the JSON
     */
    function TransferOut(wrapper, player) {
        _classCallCheck(this, TransferOut);

        var team_id = player.team_id,
            to_team = player.to_team;

        var _this2 = _possibleConstructorReturn(this, (TransferOut.__proto__ || Object.getPrototypeOf(TransferOut)).call(this, wrapper, player));

        _this2.to = {
            teamId: parseInt(team_id),
            teamName: to_team
        };
        return _this2;
    }

    return TransferOut;
}(Transfer);

/** Class representing a team's statistics */


var Statistics = function () {
    /**
     * creates a **Statistics** object to be used as an inner class
     * for the **Team** class.
     *
     * @param {Object} statistics - statistics from the JSON
     */
    function Statistics(statistics) {
        _classCallCheck(this, Statistics);

        var st = statistics;
        var home = {
            wins: filterInt(st.wins_home),
            draws: filterInt(st.draws_home),
            losses: filterInt(st.losses_home),
            goals: {
                scored: filterInt(st.goals_home),
                conceded: filterInt(st.goals_conceded_home)
            }
        };
        var away = {
            wins: filterInt(st.wins_away),
            draws: filterInt(st.draws_away),
            losses: filterInt(st.losses_away),
            goals: {
                scored: filterInt(st.goals_away),
                conceded: filterInt(st.goals_conceded_away)
            }
        };
        this.home = home;
        this.away = away;
    }

    /**
     * returns total amount of wins
     *
     * @return {number} - total amount of wins
     */


    _createClass(Statistics, [{
        key: 'wins',
        value: function wins() {
            return this.home.wins + this.away.wins;
        }

        /**
         * returns total amount of draws
         *
         * @return {number} - total amount of draws
         */

    }, {
        key: 'draws',
        value: function draws() {
            return this.home.draws + this.away.draws;
        }

        /**
         * returns total amount of losses
         *
         * @return {number} - total amount of losses
         */

    }, {
        key: 'losses',
        value: function losses() {
            return this.home.losses + this.away.losses;
        }

        /**
         * returns total amount of goals scored and conceded
         *
         * @return {goals} - total amount of goals scored and conceded
         */

    }, {
        key: 'goals',
        value: function goals() {
            var scored = '';

            /**
             * @typedef {Object} goals
             * @property {number} scored
             * @property {number} conceded
             */
            var goals = {
                scored: this.home.goals.scored + this.away.goals.scored,
                conceded: this.home.goals.conceded + this.away.goals.conceded
            };
            return goals;
        }
    }]);

    return Statistics;
}();

/**
 * creates an array of members
 *
 * @param {NodeScore} wrapper - the API wrapper object
 * @param {Object} team - team from the JSON
 * @return {Member[]} - an array of **Member** objects
 */


function createMembers(wrapper, team) {
    var members = [];
    team.squad.forEach(function (member) {
        var pushMember = new Member(wrapper, member);
        var slPlayer = void 0;
        team.sidelined.forEach(function (sl) {
            if (member.id == sl.id) {
                pushMember.sidelined.push(new Sidelined(wrapper, sl));
            }
        });
        members.push(pushMember);
    });
    return members;
}

/**
 * creates a **transfers** object containing an array of **TransferIn**
 * objects and an array of **TransferOut** objects
 *
 * @param {NodeScore} wrapper - the API wrapper object
 * @param {Object} team - team from the JSON
 * @return {transfers} - an object containing an array of **TransferIn**
 * objects and an array of **TransferOut** objects
 */
function createTransfers(wrapper, team) {
    /**
     * @typedef {Object} transfers a transfer object
     * @property {TransferIn[]} in The players that transfered in
     * @property {TransferOut[]} out The players that transfered out
     */
    var transfers = {
        in: [],
        out: []
    };

    team.transfers_in.forEach(function (transferIn) {
        return transfers.in.push(new TransferIn(wrapper, transferIn));
    });

    team.transfers_out.forEach(function (transferOut) {
        return transfers.out.push(new TransferOut(wrapper, transferOut));
    });

    return transfers;
}

/**
 * filters and creates a number out of a string
 *
 * @param {string} val - the string containing the int
 * @return {number} an int created from a string
 */
function filterInt(val) {
    return val == '-' || val == '' ? 0 : parseInt(val);
}
//# sourceMappingURL=team.js.map