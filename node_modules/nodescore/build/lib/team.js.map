{"version":3,"sources":["../../src/lib/team.js"],"names":["Team","wrapper","team","t","id","parseInt","team_id","isNational","is_national","founded","leagues","split","forEach","league","push","venue","venue_id","name","venue_name","city","venue_city","address","venue_address","surface","venue_surface","capacity","venue_capacity","coach","coach_id","coach_name","squad","Squad","transfers","createTransfers","statistics","Statistics","copy","Object","assign","Member","player","p","age","number","position","injured","minutes","appearences","lineups","goals","assists","cards","yellow","yellowcards","red","redcards","substitute","in","substitute_in","out","substitute_out","onBench","substitutes_on_bench","sidelined","Sidelined","s","description","startDate","startdate","endDate","enddate","members","createMembers","Transfer","date","TransferIn","from_team","from","teamId","teamName","TransferOut","to_team","to","st","home","wins","filterInt","wins_home","draws","draws_home","losses","losses_home","scored","goals_home","conceded","goals_conceded_home","away","wins_away","draws_away","losses_away","goals_away","goals_conceded_away","member","pushMember","slPlayer","sl","transfers_in","transferIn","transfers_out","transferOut","val"],"mappings":"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","file":"team.js","sourcesContent":["import {createDateObject} from './util';\nimport Player from './player';\n\n/** Class representing a team. */\nexport default class Team {\n    /**\n     * creates a **Team** object\n     *\n     * @param {NodeScore} wrapper - the API wrapper object\n     * @param {Object} team - team from the JSON\n     */\n    constructor(wrapper, team) {\n        const t = team;\n\n        this.wrapper = wrapper;\n        this.id = parseInt(t.team_id);\n        this.isNational = (t.is_national == 'True');\n        this.founded = parseInt(t.founded);\n        let leagues = [];\n        t.leagues.split(',')\n            .forEach((league) => leagues.push(parseInt(league)));\n\n        /** @type {number[]} */\n        this.leagues = leagues;\n\n        /**\n         * @typedef {Object} venue\n         * @property {number} id - id of the venue\n         * @property {string} name - name of the venue\n         * @property {string} city - city of the venue\n         * @property {string} address - address of the venue\n         * @property {string} surface - surface of the venue\n         * @property {number} capacity - capacity of the venue\n        */\n        const venue = {\n            id: parseInt(t.venue_id),\n            name: t.venue_name,\n            city: t.venue_city,\n            address: t.venue_address,\n            surface: t.venue_surface,\n            capacity: parseInt(t.venue_capacity),\n        };\n        this.venue = venue;\n\n        /**\n         * @typedef {Object} coach\n         * @property {number} id - id of the coach\n         * @property {string} name - name of the coach\n         */\n        const coach = {\n            id: parseInt(t.coach_id),\n            name: t.coach_name,\n        };\n        this.coach = coach;\n        this.squad = new Squad(wrapper, team);\n        this.transfers = createTransfers(wrapper, team);\n        this.statistics = new Statistics(t.statistics[0]);\n    }\n\n    /** @return {*} */\n    toJSON() {\n        let copy = Object.assign({}, this);\n        delete copy.wrapper;\n\n        return copy;\n    }\n}\n\n/** Class representing a squad member. */\nclass Member {\n    /**\n     * creates a **Member** object to be used as an inner class\n     * for the **Team** class.\n     *\n     * @param {NodeScore} wrapper - the API wrapper object\n     * @param {Object} player - player from the JSON\n     */\n    constructor(wrapper, player) {\n        const p = player;\n\n        this.wrapper = wrapper;\n        this.id = parseInt(p.id);\n        this.age = parseInt(p.age);\n        this.name = p.name;\n        this.number = parseInt(p.number);\n        this.position = p.position;\n        this.injured = (p.injured == 'True');\n        this.minutes = parseInt(p.minutes);\n        this.appearences = parseInt(p.appearences);\n        this.lineups = parseInt(p.lineups);\n        this.goals = parseInt(p.goals);\n        this.assists = parseInt(p.assists);\n        this.cards = {\n            yellow: parseInt(p.yellowcards),\n            red: parseInt(p.redcards),\n        };\n        this.substitute = {\n            in: parseInt(p.substitute_in),\n            out: parseInt(p.substitute_out),\n            onBench: parseInt(p.substitutes_on_bench),\n        };\n        /** @type {Sidelined[]} */\n        this.sidelined = [];\n    }\n\n    /**\n     * returns one player in promise form\n     *\n     * @return {Promise<Competition, Error>} returns a\n     * Promise containing a **Player** object.\n     */\n    player() {\n        return this.wrapper.player(this.id);\n    }\n\n    /** @return {*} */\n    toJSON() {\n        let copy = Object.assign({}, this);\n        delete copy.wrapper;\n\n        return copy;\n    }\n}\n\n/** Class representing a sidelined squad member. */\nclass Sidelined {\n    /**\n     * creates a **Sidelined** object to be used as an inner class\n     * for the **Member** class.\n     *\n     * @param {NodeScore} wrapper - the API wrapper object\n     * @param {Object} sidelined - sidelined from the JSON\n     */\n    constructor(wrapper, sidelined) {\n        const s = sidelined;\n\n        this.description = s.description;\n        this.startDate = createDateObject(s.startdate);\n        this.endDate = s.enddate == '' ? null : createDateObject(s.enddate);\n    }\n}\n\n/** Class representing a squad. */\nclass Squad {\n    /**\n     * creates a **Squad** object to be used as an inner class\n     * for the **Team** class.\n     *\n     * @param {NodeScore} wrapper - the API wrapper object\n     * @param {Object} team - team from the JSON\n     */\n    constructor(wrapper, team) {\n        this.members = createMembers(wrapper, team);\n    }\n\n    /** @return {*} */\n    toJSON() {\n        let copy = Object.assign({}, this);\n        delete copy.wrapper;\n\n        return copy;\n    }\n}\n\n/** Class representing a transfer. */\nclass Transfer {\n    /**\n     * creates a **Transfer** object to be used as an inner class\n     * for the **Team** class.\n     *\n     * @param {NodeScore} wrapper - the API wrapper object\n     * @param {Object} player - player from the JSON\n     */\n    constructor(wrapper, player) {\n        const {id, name, date} = player;\n\n        this.wrapper = wrapper;\n        this.id = parseInt(id);\n        this.name = name;\n        this.date = createDateObject(date);\n    }\n\n    /**\n     * returns one player in promise form\n     *\n     * @return {Promise<Player, Error>} returns a\n     * Promise containing a **Player** object.\n     */\n    player() {\n        return this.wrapper.player(this.id);\n    }\n\n    /** @return {*} */\n    toJSON() {\n        let copy = Object.assign({}, this);\n        delete copy.wrapper;\n\n        return copy;\n    }\n}\n\n/** Class representing a transfer in. */\nclass TransferIn extends Transfer {\n    /**\n     * creates a **TransferIn** object to be used as an inner class\n     * for the **Team** class.\n     *\n     * @param {NodeScore} wrapper - the API wrapper object\n     * @param {Object} player - player from the JSON\n     */\n    constructor(wrapper, player) {\n        const {team_id, from_team} = player;\n        super(wrapper, player);\n\n        this.from = {\n            teamId: parseInt(team_id),\n            teamName: from_team,\n        };\n    }\n}\n\n/** Class representing a transfer in. */\nclass TransferOut extends Transfer {\n    /**\n     * creates a **TransferOut** object to be used as an inner class\n     * for the **Team** class.\n     *\n     * @param {NodeScore} wrapper - the API wrapper object\n     * @param {Object} player - player from the JSON\n     */\n    constructor(wrapper, player) {\n        const {team_id, to_team} = player;\n        super(wrapper, player);\n\n        this.to = {\n            teamId: parseInt(team_id),\n            teamName: to_team,\n        };\n    }\n}\n\n/** Class representing a team's statistics */\nclass Statistics {\n    /**\n     * creates a **Statistics** object to be used as an inner class\n     * for the **Team** class.\n     *\n     * @param {Object} statistics - statistics from the JSON\n     */\n    constructor(statistics) {\n        const st = statistics;\n        const home = {\n            wins: filterInt(st.wins_home),\n            draws: filterInt(st.draws_home),\n            losses: filterInt(st.losses_home),\n            goals: {\n                scored: filterInt(st.goals_home),\n                conceded: filterInt(st.goals_conceded_home),\n            },\n        };\n        const away = {\n            wins: filterInt(st.wins_away),\n            draws: filterInt(st.draws_away),\n            losses: filterInt(st.losses_away),\n            goals: {\n                scored: filterInt(st.goals_away),\n                conceded: filterInt(st.goals_conceded_away),\n            },\n        };\n        this.home = home;\n        this.away = away;\n    }\n\n    /**\n     * returns total amount of wins\n     *\n     * @return {number} - total amount of wins\n     */\n    wins() {\n        return this.home.wins + this.away.wins;\n    }\n\n    /**\n     * returns total amount of draws\n     *\n     * @return {number} - total amount of draws\n     */\n    draws() {\n        return this.home.draws + this.away.draws;\n    }\n\n    /**\n     * returns total amount of losses\n     *\n     * @return {number} - total amount of losses\n     */\n    losses() {\n        return this.home.losses + this.away.losses;\n    }\n\n    /**\n     * returns total amount of goals scored and conceded\n     *\n     * @return {goals} - total amount of goals scored and conceded\n     */\n    goals() {\n        const scored = '';\n\n        /**\n         * @typedef {Object} goals\n         * @property {number} scored\n         * @property {number} conceded\n         */\n        const goals = {\n            scored: this.home.goals.scored + this.away.goals.scored,\n            conceded: this.home.goals.conceded + this.away.goals.conceded,\n        };\n        return goals;\n    }\n}\n\n/**\n * creates an array of members\n *\n * @param {NodeScore} wrapper - the API wrapper object\n * @param {Object} team - team from the JSON\n * @return {Member[]} - an array of **Member** objects\n */\nfunction createMembers(wrapper, team) {\n    let members = [];\n    team.squad.forEach((member) => {\n        let pushMember = new Member(wrapper, member);\n        let slPlayer;\n        team.sidelined.forEach((sl) => {\n            if (member.id == sl.id) {\n                pushMember.sidelined.push(new Sidelined(wrapper, sl));\n            }\n        });\n        members.push(pushMember);\n    });\n    return members;\n}\n\n/**\n * creates a **transfers** object containing an array of **TransferIn**\n * objects and an array of **TransferOut** objects\n *\n * @param {NodeScore} wrapper - the API wrapper object\n * @param {Object} team - team from the JSON\n * @return {transfers} - an object containing an array of **TransferIn**\n * objects and an array of **TransferOut** objects\n */\nfunction createTransfers(wrapper, team) {\n    /**\n     * @typedef {Object} transfers a transfer object\n     * @property {TransferIn[]} in The players that transfered in\n     * @property {TransferOut[]} out The players that transfered out\n     */\n    let transfers = {\n        in: [],\n        out: [],\n    };\n\n    team.transfers_in.forEach((transferIn) =>\n        transfers.in.push(new TransferIn(wrapper, transferIn)));\n\n\n    team.transfers_out.forEach((transferOut) =>\n        transfers.out.push(new TransferOut(wrapper, transferOut)));\n\n    return transfers;\n}\n\n/**\n * filters and creates a number out of a string\n *\n * @param {string} val - the string containing the int\n * @return {number} an int created from a string\n */\nfunction filterInt(val) {\n    return (val == '-' || val == '') ? 0: parseInt(val);\n}\n"]}