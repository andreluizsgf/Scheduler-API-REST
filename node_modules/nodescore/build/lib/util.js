'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getJSON = getJSON;
exports.createObject = createObject;
exports.createDateObject = createDateObject;
exports.createStringFromDate = createStringFromDate;

var _http = require('http');

var http = _interopRequireWildcard(_http);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * returns a parsed JSON from URL
 *
 * @param {string} url - the URL request for the JSON
 * @return {(Promise<Object>|Promise<Object[]>)} returns a parsed JSON
 */
function getJSON(url) {
    return new Promise(function (resolve, reject) {
        http.get(url, function (res) {
            var statusCode = res.statusCode;

            if (statusCode !== 200) {
                res.resume();
                var err = new Error(statusCode + ' statuscode.\n' + ('Url requested: ' + url + '. \nResponse headers: ') + ('' + JSON.stringify(res.headers)));
                err.statusCode = statusCode;
                reject(err);
            }

            res.setEncoding('utf8');
            var rawData = '';
            res.on('data', function (chunk) {
                rawData += chunk;
            });
            res.on('end', function () {
                try {
                    var parsedData = JSON.parse(rawData);
                    resolve(parsedData);
                } catch (e) {
                    reject(e);
                }
            });
        }).on('error', function (e) {
            reject(e);
        });
    });
}

/**
 * returns one or multiple objects of a certain class
 *
 * @param {class} ClassType - the class you want to create
 * @param {NodeScore} self - the NodeScore wrapper object
 * @param {(object|object[])} values - the values that need
 * to be parsed in the Class
 * @return {(object|object[])} returns one or multiple objects
 * of a certain class
 */
function createObject(ClassType, self, values) {
    if (Array.isArray(values)) {
        var objects = [];
        values.forEach(function (obj) {
            objects.push(new ClassType(self, obj));
        });
        return objects;
    } else {
        return new ClassType(self, values);
    }
}

/**
 * creates date object from string from JSON
 *
 * @param {string} dateString - the datestring from the JSON
 * @return {Date} - the date created from the datestring
 */
function createDateObject(dateString) {
    var ss = dateString.split('.');
    return new Date(parseInt(ss[2]), parseInt(ss[1]) - 1, parseInt(ss[0]) + 1);
}

/**
 *
 * @param {*} date
 * @return {string}
 */
function createStringFromDate(date) {
    return '' + ((date.getUTCDate() > 9 ? '' : '0') + date.getUTCDate()) + ('.' + ((date.getUTCMonth() + 1 > 9 ? '' : '0') + (date.getUTCMonth() + 1))) + ('.' + date.getFullYear());
}
//# sourceMappingURL=util.js.map