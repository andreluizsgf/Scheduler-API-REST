{"version":3,"sources":["../../src/lib/util.js"],"names":["getJSON","createObject","createDateObject","createStringFromDate","http","url","Promise","resolve","reject","get","res","statusCode","resume","err","Error","JSON","stringify","headers","setEncoding","rawData","on","chunk","parsedData","parse","e","ClassType","self","values","Array","isArray","objects","forEach","obj","push","dateString","ss","split","Date","parseInt","date","getUTCDate","getUTCMonth","getFullYear"],"mappings":";;;;;QAQgBA,O,GAAAA,O;QA0CAC,Y,GAAAA,Y;QAkBAC,gB,GAAAA,gB;QAcAC,oB,GAAAA,oB;;AAlFhB;;IAAYC,I;;;;AAEZ;;;;;;AAMO,SAASJ,OAAT,CAAiBK,GAAjB,EAAsB;AACzB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCJ,aAAKK,GAAL,CAASJ,GAAT,EAAc,UAACK,GAAD,EAAS;AAAA,gBACZC,UADY,GACED,GADF,CACZC,UADY;;AAEnB,gBAAIA,eAAe,GAAnB,EAAwB;AACpBD,oBAAIE,MAAJ;AACA,oBAAIC,MAAM,IAAIC,KAAJ,CAAaH,UAAH,2CACFN,GADE,qCAEjBU,KAAKC,SAAL,CAAeN,IAAIO,OAAnB,CAFiB,CAAV,CAAV;AAGAJ,oBAAIF,UAAJ,GAAiBA,UAAjB;AACAH,uBAAOK,GAAP;AACH;;AAEDH,gBAAIQ,WAAJ,CAAgB,MAAhB;AACA,gBAAIC,UAAU,EAAd;AACAT,gBAAIU,EAAJ,CAAO,MAAP,EAAe,UAACC,KAAD,EAAW;AACtBF,2BAAWE,KAAX;AACH,aAFD;AAGAX,gBAAIU,EAAJ,CAAO,KAAP,EAAc,YAAM;AAChB,oBAAI;AACA,wBAAME,aAAaP,KAAKQ,KAAL,CAAWJ,OAAX,CAAnB;AACAZ,4BAAQe,UAAR;AACH,iBAHD,CAGE,OAAOE,CAAP,EAAU;AACRhB,2BAAOgB,CAAP;AACH;AACJ,aAPD;AAQH,SAxBD,EAwBGJ,EAxBH,CAwBM,OAxBN,EAwBe,UAACI,CAAD,EAAO;AAClBhB,mBAAOgB,CAAP;AACH,SA1BD;AA2BH,KA5BM,CAAP;AA6BH;;AAED;;;;;;;;;;AAUO,SAASvB,YAAT,CAAsBwB,SAAtB,EAAiCC,IAAjC,EAAuCC,MAAvC,EAA+C;AAClD,QAAIC,MAAMC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACvB,YAAIG,UAAU,EAAd;AACAH,eAAOI,OAAP,CAAe,UAASC,GAAT,EAAc;AACzBF,oBAAQG,IAAR,CAAa,IAAIR,SAAJ,CAAcC,IAAd,EAAoBM,GAApB,CAAb;AACH,SAFD;AAGA,eAAOF,OAAP;AACH,KAND,MAMO;AACH,eAAO,IAAIL,SAAJ,CAAcC,IAAd,EAAoBC,MAApB,CAAP;AACH;AACJ;;AAED;;;;;;AAMO,SAASzB,gBAAT,CAA0BgC,UAA1B,EAAsC;AACzC,QAAIC,KAAKD,WAAWE,KAAX,CAAiB,GAAjB,CAAT;AACA,WAAO,IAAIC,IAAJ,CACHC,SAASH,GAAG,CAAH,CAAT,CADG,EAEHG,SAASH,GAAG,CAAH,CAAT,IAAkB,CAFf,EAGHG,SAASH,GAAG,CAAH,CAAT,IAAkB,CAHf,CAAP;AAKH;;AAED;;;;;AAKO,SAAShC,oBAAT,CAA8BoC,IAA9B,EAAoC;AACvC,WAAO,MAAG,CAACA,KAAKC,UAAL,KAAoB,CAApB,GAAwB,EAAxB,GAA6B,GAA9B,IACJD,KAAKC,UAAL,EADC,YAEH,CAAED,KAAKE,WAAL,KAAqB,CAAtB,GAA2B,CAA3B,GAA+B,EAA/B,GAAoC,GAArC,KACGF,KAAKE,WAAL,KAAqB,CADxB,CAFG,YAIHF,KAAKG,WAAL,EAJG,CAAP;AAKH","file":"util.js","sourcesContent":["import * as http from 'http';\n\n/**\n * returns a parsed JSON from URL\n *\n * @param {string} url - the URL request for the JSON\n * @return {(Promise<Object>|Promise<Object[]>)} returns a parsed JSON\n */\nexport function getJSON(url) {\n    return new Promise((resolve, reject) => {\n        http.get(url, (res) => {\n            const {statusCode} = res;\n            if (statusCode !== 200) {\n                res.resume();\n                let err = new Error(`${statusCode} statuscode.\\n` +\n                `Url requested: ${url}. \\nResponse headers: ` +\n                `${JSON.stringify(res.headers)}`);\n                err.statusCode = statusCode;\n                reject(err);\n            }\n\n            res.setEncoding('utf8');\n            let rawData = '';\n            res.on('data', (chunk) => {\n                rawData += chunk;\n            });\n            res.on('end', () => {\n                try {\n                    const parsedData = JSON.parse(rawData);\n                    resolve(parsedData);\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        }).on('error', (e) => {\n            reject(e);\n        });\n    });\n}\n\n/**\n * returns one or multiple objects of a certain class\n *\n * @param {class} ClassType - the class you want to create\n * @param {NodeScore} self - the NodeScore wrapper object\n * @param {(object|object[])} values - the values that need\n * to be parsed in the Class\n * @return {(object|object[])} returns one or multiple objects\n * of a certain class\n */\nexport function createObject(ClassType, self, values) {\n    if (Array.isArray(values)) {\n        let objects = [];\n        values.forEach(function(obj) {\n            objects.push(new ClassType(self, obj));\n        });\n        return objects;\n    } else {\n        return new ClassType(self, values);\n    }\n}\n\n/**\n * creates date object from string from JSON\n *\n * @param {string} dateString - the datestring from the JSON\n * @return {Date} - the date created from the datestring\n */\nexport function createDateObject(dateString) {\n    let ss = dateString.split('.');\n    return new Date(\n        parseInt(ss[2]),\n        parseInt(ss[1]) - 1,\n        parseInt(ss[0]) + 1\n    );\n}\n\n/**\n *\n * @param {*} date\n * @return {string}\n */\nexport function createStringFromDate(date) {\n    return `${(date.getUTCDate() > 9 ? '' : '0')\n        + date.getUTCDate()}` +\n    `.${((date.getUTCMonth() + 1) > 9 ? '' : '0')\n        + (date.getUTCMonth() + 1)}` +\n    `.${date.getFullYear()}`;\n}\n"]}